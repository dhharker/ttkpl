    
    <?php
    $er = new MicroEnvironmentalRecord();

// nowX = decrement property index (i.e. last used) and update property (e.g. change the thickness of an exigent burial layer).
// thenX = add a new property to the index (e.g. indicate that at/by a point, a layer of a certain thickness had appeared).
// isX = set a singleton property (e.g. shading)

    $er->
        deposited ("30000 BP", "Deposition event was a land-slide")->
            isLocated (50, 30, "Somewhereville")->
            isElevated ("68 MAMSL", "The sample environment is 68 metres above mean sea level (NB that doesn't include any dirt on top of it!)")->
            thenBuried (0.9, SANDY_SOIL, "Soil from hill to north fell down in one.")->
            isShaded (FALSE, "All the plants were gone after the landslide")->
        by ("10 AFTER_DEPOSITED", "Estimated timespan of 10 years after deposition event for vegetation to regrow in this location")->
            isShaded (TRUE, "The plants grew back over time")->
            
        by ("500 BC", "TAQ of 500BC for layer from artifact strat above.")->
            thenBuried (1.2, LOAM, "This layer of soil built up over time.")->
        by ("1200 AD", "TAQ of 1200AD for layer from strat.")->
            nowBuried (1.3, LOAM, "That same layer of soil continued to build up, but much more slowly between 500BC and 1200AD")->
        
        at ("1600 AD", "There was a volcano now as shown by historic records")->
            thenBuried (0.1, VOLCANIC_ASH, "Not more natural disasters?!")->
        by ("1601 AD")->
            nowBuried (0.01, ERODED_VOLCANIC_ASH, "The ash has washed down and become thinner and less insulating over the year.")->
        
        by ("1971 AD")->
            thenBuried (2, SILTY_SOIL, "This layer of soil built up over time until excavation")->
            
        excavated ("ABC123 INT1 1971 CXT5678")->
            isLocated (51, 0, "Yorkshire Museum Basement")->
            annualTemperatureSine (mean, amplitude)->
        
        moved ("2002 AD")->
            asLastBut()->
            isLocated ("King's Manor Storage Garage of Eternity")->
            annualTemperatureSeries ('example_temp_series_2000_2009_garage_o_doom.csv')->
    
    $er->getEnvironmentAt ("1104 BC") returns MicroEnvironment with data as input to MER object, interpolated where appropriate. 
    
    class MicroEnvironmentalRecord {
    
        function __construct () {
            
        }
        
        /*
            Temporal Methods & Aliases
        */
        
        // Temporals
        function at ($when, $desc = NULL, $event = NULL) {          $this->_setTimeContext ($when, $desc, $event, FALSE);           return $this;   }
        function by ($when, $desc = NULL, $event = NULL) {          $this->_setTimeContext ($when, $desc, $event, TRUE);            return $this;   }
        
        // Aliases
        function deposited ($whenOrDesc, $descOrNull = NULL) {      $this->_tAliasEvent ('DEPOSITED', $whenOrDesc, $descOrNull);    return $this;   }
        function excavated ($whenOrDesc, $descOrNull = NULL) {      $this->_tAliasEvent ('EXCAVATED', $whenOrDesc, $descOrNull);    return $this;   }
        function moved ($whenOrDesc, $descOrNull = NULL) {          $this->_tAliasEvent ('MOVED', $whenOrDesc, $descOrNull);        return $this;   }
        
        
        /*
            Datum methods & Aliases
        */
        
        // Datums
        function isLocated ($latOD, $lonON = NULL, $descON = NULL) {
            if ((!is_numeric ($latOD) || !is_numeric ($lonON)) && $desc = $this->_desc ($latOD) && $desc !== FALSE) {
                // ... update description only
            }
            elseif ($l = latLon::bootStrap (array ($latOD, $lonOn)) && $l !== FALSE) {
                if (strlen ($descON) > 0) {
                    // ... set description
                }
                // ... set location
            }
        }
        isElevated
        isShaded
        
        // Interpolatable
        thenBuried
        nowBuried
        
        // Aliases
        
        
        
        
        
        
        
        /*
            Heavy metal
        */
        
        function _interpolateFromToAt (EnvironmentalRecord $older, EnvironmentalRecord $younger, $at_yrsbp) {
            /*
            Assume that anything that's changed in $younger from its value in $older did so 
            in a linear manner over the time difference between the two,
            */
        }
        
        private $tcER = array (); // array (int years bp => EnvironmentalRecord)
        private $tcDesc = array ();
        private $tcEvent = array ();
        private $tcInterp = array ();
        
        // convenience
        private $ctcER = NULL;
        private $ctcYbp = NULL;
        
        function _setTimeContext ($when, $desc = NULL, $event = NULL, $interpolatePastwards = FALSE) {
            $when = $this->_when ($when);
            if (!$when) return FALSE;
            if     (strtolower ($interpolatePastwards) == 'at') $interpolatePastwards = FALSE;
            elseif (strtolower ($interpolatePastwards) == 'by') $interpolatePastwards = TRUE;
            
            
            
            // ... now set context
            if (!(isset ($this->tcER[$when]) && is_a ($this->tcER[$when], 'EnvironmentalRecord')))
                $this->tcER[$when] = new EnvironmentalRecord ();
            
            if ($desc !== NULL) $this->tcDesc[$when] = $desc;
            if ($event !== NULL) $this->tcEvent[$when] = $event;
            if ($interp !== NULL) $this->tcInterp[$when] = $interpolatePastwards;
            
            $this->ctcER &= $this->tcER[$when];
            $this->ctcYbp = $when;
            
            
            
        }
        
        //function _setContextualDatum ($when
        
        function _when ($when) {
            if (is_object ($when) && is_a ($when, 'palaeoTime'))
                return $when->getYearsBp();
            elseif (is_numeric ($when) && $when !== FALSE && $pt = palaeoTime::bootStrap ($when) && $pt !== FALSE)
                return $pt->getYearsBp();
            elseif ($when == 'THEN')
                return $this->ctcYbp;
            
            $when = preg_replace ('/[^a-z0-9\s\.]/im','',$when);
            $when = preg_replace ('/\s+/im',' ',$when);
            preg_match ('/((AD|CE)?\s*([-+]?\d+(\.\d+)?))|(([-+]?\d+(\.\d+)?)\s*(ye?a?rs?\.?)?\s*(AD|CE)?(BCE?)?(b\W{0-2}p\W{0,2})?)|(THEN)/i',$when, $matches);
            
            // ... crunch and return (int) years bp
            
        }
        
        function _desc ($desc) {
            $desc = preg_replace ('/\s{2,}/', ' ', $desc);
            $desc = preg_replace ('/[^a-z0-9\s._-:\'"\[\]()]/i', '', $desc);
            $desc = trim ($desc);
            return (strlen ($desc) == 0) ? FALSE : $desc;
        }
        
        function _tAliasEvent ($event, $whenOrDesc, $descOrNull = NULL) {
            if ($descOrNull !== NULL)
                $this->_setTimeContext ($whenOrDesc, $descOrNull, 'DEPOSITED', FALSE);
            else
                $this->_setTimeContext ('THEN', $whenOrDesc, 'DEPOSITED', FALSE);
        }
    
    }
    
    
    class EnvironmentalRecord {
        
        private $yearsBp = NULL;
        private $burialEnvironment;
        private $shading = NULL;
        private  = NULL;
        private  = NULL;
        
    }
    
    
    /**
    
    EnvironmentalRecord class
        
        The EnvironmentalRecord class contains an instantaneous snapshot of a particular environment (e.g. burial underground in a particular location at a particular time.)
    
    */
    
    /**
    
    MicroEnvironmentalRecord class
    
        The MicroEnvironmentalRecord object contains facts, datasource references and descriptions/citations which describe what is known about the microenvironment of an archaeological sample (e.g. bone, hair, shells etc.) throughout its entire history - from deposition through excavation and curation. The facts recorded are primarily used for modelling the local temperature of the sample, though future extensions may include other factors important in particular reactions.
        
        Features:
            *   Supports linear, natural description of the environment over time.
            *   Supports method chaining:- a subset of methods return a reference to the object instance.
        
        Natural configuration pattern:
        
        IMPORTANT: The natural pattern of use must start with deposition and method calls which update time context (i.e. to the temporal methods) must follow in chronological order.
        
        $mer->[TEMPORAL1]->[DATUM1]->[DATUM2 etc.]->[TEMPORAL2]->[DATUM...
        
        Calling a TEMPORAL method sets the current time context of the object, this is associated with any changes made to the object's state via subsequent calls to non-temporal methods, until the next temporal method call .
        
        [TEMPORAL] methods:
            at (...):
                Description:
                    Instantaneous data. Any changes made after a call to at() will be reflected only /after/ the date of the call. After this date, the values set may be either constant, or scaled [interpolated] over time if they are updated by a subsequent call to by().
                Args:
                    (when, description, [event])
            by (...):
                Description:
                    Functions similarly to at() with the exception that, where sane, datum method calls made after a call to by() will be interpolated from their value in [at] the last time context.
                Args: [same as at()]
            excavated:
            deposited:
            moved:
                Description:
                    Shortcuts for at() with event=EXCAVATED or DEPOSITED etc. and, if no 'when' param given, value "THEN" given. This is not useful for the DEPOSITED alias, but is useful for excavation or subsequent change of storage conditions e.g. $...->by("2011AD")->->moved("2012AD")
                Args
                    (description)
                    (when="THEN", description)
        
        [DATUM] methods:
            
        
        
    */
    
    
    
// at (30000, BP, "DEPOSITED")->newEnvironment()->
// at (1972, AD, "EXCAVATED")->newEnvironment()->
// storedIn ("Yorkshire Museum Basement" [extra timeseries temp data uploaded by user or use localTemperatureProfile() as below])->

        thenBuried args:
        z, dh[, desc, &obj]         (new layer of given thickness and D_h value. &obj is the burialLayer object created)
        z, obj[, desc]              (given a burialLayer already attached to the microenvironment, update its depth)
        obj
        
        
        // shorthand
            $sme->
                by ("2000 AD")->
                    thenBuried (1.5, LOAM, "Natural buildup over time")->
                excavated ("Site, context etc. method: dynamite plus chicken wire.")->
                    isLocated (12, 34, "Fake place, but with shelves.");
        // verbose
            $sme->
                by ("2000 AD")->
                    thenBuried (1.5, LOAM)->
                at ("THEN", "EXCAVATED", "Site, context etc.")->
                    isLocated (12,34);      
